# Ninja file generated by bang (https://github.com/cdsoft/bang)
# bang build.lua -o build.ninja

ninja_required_version = 1.11.1

######################################################################
# Ninja file for obfuscate.lua
# This file is generated by running bang.
######################################################################

######################################################################
# This file is part of obfuscate.lua.
#
# obfuscate.lua is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# obfuscate.lua is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with obfuscate.lua.  If not, see <https://www.gnu.org/licenses/>.
#
# For further information about obfuscate.lua you can visit
# https://cdelord.fr/obfuscate.lua
######################################################################

builddir = .build
test = $builddir/test

rule obfuscate
  command = ./obfuscate.lua $opts $in -o $out

rule run
  command = $in > $out

rule diff
  description = diff $in
  command = diff $in > $out || (cat $out && false)

build $test/hello.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =    
build $test/hello.diff: diff $test/hello.txt test/hello.stdout
build $test/hello.txt: run $test/hello.lua |@ $test/hello.diff
build $test/hello-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =    -z
build $test/hello-z.diff: diff $test/hello-z.txt test/hello.stdout
build $test/hello-z.txt: run $test/hello-z.lua |@ $test/hello-z.diff
build $test/hello-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =   -s 
build $test/hello-s.diff: diff $test/hello-s.txt test/hello.stdout
build $test/hello-s.txt: run $test/hello-s.lua |@ $test/hello-s.diff
build $test/hello-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =   -s -z
build $test/hello-s-z.diff: diff $test/hello-s-z.txt test/hello.stdout
build $test/hello-s-z.txt: run $test/hello-s-z.lua |@ $test/hello-s-z.diff
build $test/hello-b.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -b  
build $test/hello-b.diff: diff $test/hello-b.txt test/hello.stdout
build $test/hello-b.txt: run $test/hello-b.lua |@ $test/hello-b.diff
build $test/hello-b-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -b  -z
build $test/hello-b-z.diff: diff $test/hello-b-z.txt test/hello.stdout
build $test/hello-b-z.txt: run $test/hello-b-z.lua |@ $test/hello-b-z.diff
build $test/hello-b-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -b -s 
build $test/hello-b-s.diff: diff $test/hello-b-s.txt test/hello.stdout
build $test/hello-b-s.txt: run $test/hello-b-s.lua |@ $test/hello-b-s.diff
build $test/hello-b-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -b -s -z
build $test/hello-b-s-z.diff: diff $test/hello-b-s-z.txt test/hello.stdout
build $test/hello-b-s-z.txt: run $test/hello-b-s-z.lua |@ $test/hello-b-s-z.diff
build $test/hello-bb.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -bb  
build $test/hello-bb.diff: diff $test/hello-bb.txt test/hello.stdout
build $test/hello-bb.txt: run $test/hello-bb.lua |@ $test/hello-bb.diff
build $test/hello-bb-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -bb  -z
build $test/hello-bb-z.diff: diff $test/hello-bb-z.txt test/hello.stdout
build $test/hello-bb-z.txt: run $test/hello-bb-z.lua |@ $test/hello-bb-z.diff
build $test/hello-bb-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -bb -s 
build $test/hello-bb-s.diff: diff $test/hello-bb-s.txt test/hello.stdout
build $test/hello-bb-s.txt: run $test/hello-bb-s.lua |@ $test/hello-bb-s.diff
build $test/hello-bb-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts =  -bb -s -z
build $test/hello-bb-s-z.diff: diff $test/hello-bb-s-z.txt test/hello.stdout
build $test/hello-bb-s-z.txt: run $test/hello-bb-s-z.lua |@ $test/hello-bb-s-z.diff
build $test/hello-x.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x   
build $test/hello-x.diff: diff $test/hello-x.txt test/hello.stdout
build $test/hello-x.txt: run $test/hello-x.lua |@ $test/hello-x.diff
build $test/hello-x-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x   -z
build $test/hello-x-z.diff: diff $test/hello-x-z.txt test/hello.stdout
build $test/hello-x-z.txt: run $test/hello-x-z.lua |@ $test/hello-x-z.diff
build $test/hello-x-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x  -s 
build $test/hello-x-s.diff: diff $test/hello-x-s.txt test/hello.stdout
build $test/hello-x-s.txt: run $test/hello-x-s.lua |@ $test/hello-x-s.diff
build $test/hello-x-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x  -s -z
build $test/hello-x-s-z.diff: diff $test/hello-x-s-z.txt test/hello.stdout
build $test/hello-x-s-z.txt: run $test/hello-x-s-z.lua |@ $test/hello-x-s-z.diff
build $test/hello-x-b.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -b  
build $test/hello-x-b.diff: diff $test/hello-x-b.txt test/hello.stdout
build $test/hello-x-b.txt: run $test/hello-x-b.lua |@ $test/hello-x-b.diff
build $test/hello-x-b-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -b  -z
build $test/hello-x-b-z.diff: diff $test/hello-x-b-z.txt test/hello.stdout
build $test/hello-x-b-z.txt: run $test/hello-x-b-z.lua |@ $test/hello-x-b-z.diff
build $test/hello-x-b-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -b -s 
build $test/hello-x-b-s.diff: diff $test/hello-x-b-s.txt test/hello.stdout
build $test/hello-x-b-s.txt: run $test/hello-x-b-s.lua |@ $test/hello-x-b-s.diff
build $test/hello-x-b-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -b -s -z
build $test/hello-x-b-s-z.diff: diff $test/hello-x-b-s-z.txt test/hello.stdout
build $test/hello-x-b-s-z.txt: run $test/hello-x-b-s-z.lua |@ $test/hello-x-b-s-z.diff
build $test/hello-x-bb.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -bb  
build $test/hello-x-bb.diff: diff $test/hello-x-bb.txt test/hello.stdout
build $test/hello-x-bb.txt: run $test/hello-x-bb.lua |@ $test/hello-x-bb.diff
build $test/hello-x-bb-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -bb  -z
build $test/hello-x-bb-z.diff: diff $test/hello-x-bb-z.txt test/hello.stdout
build $test/hello-x-bb-z.txt: run $test/hello-x-bb-z.lua |@ $test/hello-x-bb-z.diff
build $test/hello-x-bb-s.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -bb -s 
build $test/hello-x-bb-s.diff: diff $test/hello-x-bb-s.txt test/hello.stdout
build $test/hello-x-bb-s.txt: run $test/hello-x-bb-s.lua |@ $test/hello-x-bb-s.diff
build $test/hello-x-bb-s-z.lua: obfuscate test/hello.lua | obfuscate.lua
  opts = -x -bb -s -z
build $test/hello-x-bb-s-z.diff: diff $test/hello-x-bb-s-z.txt test/hello.stdout
build $test/hello-x-bb-s-z.txt: run $test/hello-x-bb-s-z.lua |@ $test/hello-x-bb-s-z.diff

######################################################################
# Regenerate build.ninja when build.lua changes
######################################################################

rule bang
  command = bang $in -o $out
  generator = true

build build.ninja: bang build.lua
